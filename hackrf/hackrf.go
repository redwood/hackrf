// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Sat, 20 Nov 2021 18:13:09 CST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package hackrf

/*
#cgo CFLAGS: -msse4.1 -Wall -fPIC -I. -I.. -I../host/libhackrf/src
#cgo LDFLAGS: -lm -lusb-1.0 ${SRCDIR}/../host/build/libhackrf/src/libhackrf.a
#include <inttypes.h>
#include <complex.h>
#include "host/libhackrf/src/hackrf.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"

// // LibraryVersion function as declared in src/hackrf.h:179
// func LibraryVersion() string {
// 	__ret := C.hackrf_library_version()
// 	__v := packPCharString(__ret)
// 	return __v
// }

// // LibraryRelease function as declared in src/hackrf.h:180
// func LibraryRelease() string {
// 	__ret := C.hackrf_library_release()
// 	__v := packPCharString(__ret)
// 	return __v
// }

// // GetDeviceListOpen function as declared in src/hackrf.h:183
// func GetDeviceListOpen(List []DeviceList, Idx int32, Device [][]Device) int32 {
// 	cList, _ := unpackArgSDeviceList(List)
// 	cIdx, _ := (C.int)(Idx), cgoAllocsUnknown
// 	cDevice, _ := unpackArgSSDevice(Device)
// 	__ret := C.hackrf_device_list_open(cList, cIdx, cDevice)
// 	packSSDevice(Device, cDevice)
// 	packSDeviceList(List, cList)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // GetDeviceListFree function as declared in src/hackrf.h:184
// func GetDeviceListFree(List []DeviceList) {
// 	cList, _ := unpackArgSDeviceList(List)
// 	C.hackrf_device_list_free(cList)
// 	packSDeviceList(List, cList)
// }

// // OpenBySerial function as declared in src/hackrf.h:187
// func OpenBySerial(DesiredSerialNumber string, Device [][]Device) int32 {
// 	cDesiredSerialNumber, _ := unpackPCharString(DesiredSerialNumber)
// 	cDevice, _ := unpackArgSSDevice(Device)
// 	__ret := C.hackrf_open_by_serial(cDesiredSerialNumber, cDevice)
// 	packSSDevice(Device, cDevice)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // Max2837Read function as declared in src/hackrf.h:199
// func Max2837Read(Device []Device, RegisterNumber byte, Value []uint16) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cRegisterNumber, _ := (C.uint8_t)(RegisterNumber), cgoAllocsUnknown
// 	cValue, _ := (*C.uint16_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Value)).Data)), cgoAllocsUnknown
// 	__ret := C.hackrf_max2837_read(cDevice, cRegisterNumber, cValue)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // Max2837Write function as declared in src/hackrf.h:200
// func Max2837Write(Device []Device, RegisterNumber byte, Value uint16) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cRegisterNumber, _ := (C.uint8_t)(RegisterNumber), cgoAllocsUnknown
// 	cValue, _ := (C.uint16_t)(Value), cgoAllocsUnknown
// 	__ret := C.hackrf_max2837_write(cDevice, cRegisterNumber, cValue)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // Si5351cRead function as declared in src/hackrf.h:202
// func Si5351cRead(Device []Device, RegisterNumber uint16, Value []uint16) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cRegisterNumber, _ := (C.uint16_t)(RegisterNumber), cgoAllocsUnknown
// 	cValue, _ := (*C.uint16_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Value)).Data)), cgoAllocsUnknown
// 	__ret := C.hackrf_si5351c_read(cDevice, cRegisterNumber, cValue)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // Si5351cWrite function as declared in src/hackrf.h:203
// func Si5351cWrite(Device []Device, RegisterNumber uint16, Value uint16) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cRegisterNumber, _ := (C.uint16_t)(RegisterNumber), cgoAllocsUnknown
// 	cValue, _ := (C.uint16_t)(Value), cgoAllocsUnknown
// 	__ret := C.hackrf_si5351c_write(cDevice, cRegisterNumber, cValue)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // SetBasebandFilterBandwidth function as declared in src/hackrf.h:205
// func SetBasebandFilterBandwidth(Device []Device, BandwidthHz uint32) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cBandwidthHz, _ := (C.uint32_t)(BandwidthHz), cgoAllocsUnknown
// 	__ret := C.hackrf_set_baseband_filter_bandwidth(cDevice, cBandwidthHz)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // Rffc5071Read function as declared in src/hackrf.h:207
// func Rffc5071Read(Device []Device, RegisterNumber byte, Value []uint16) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cRegisterNumber, _ := (C.uint8_t)(RegisterNumber), cgoAllocsUnknown
// 	cValue, _ := (*C.uint16_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Value)).Data)), cgoAllocsUnknown
// 	__ret := C.hackrf_rffc5071_read(cDevice, cRegisterNumber, cValue)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // Rffc5071Write function as declared in src/hackrf.h:208
// func Rffc5071Write(Device []Device, RegisterNumber byte, Value uint16) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cRegisterNumber, _ := (C.uint8_t)(RegisterNumber), cgoAllocsUnknown
// 	cValue, _ := (C.uint16_t)(Value), cgoAllocsUnknown
// 	__ret := C.hackrf_rffc5071_write(cDevice, cRegisterNumber, cValue)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // SpiflashErase function as declared in src/hackrf.h:210
// func SpiflashErase(Device []Device) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	__ret := C.hackrf_spiflash_erase(cDevice)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // SpiflashWrite function as declared in src/hackrf.h:211
// func SpiflashWrite(Device []Device, Address uint32, Length uint16, Data []byte) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cAddress, _ := (C.uint32_t)(Address), cgoAllocsUnknown
// 	cLength, _ := (C.uint16_t)(Length), cgoAllocsUnknown
// 	cData, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Data)).Data)), cgoAllocsUnknown
// 	__ret := C.hackrf_spiflash_write(cDevice, cAddress, cLength, cData)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // SpiflashRead function as declared in src/hackrf.h:212
// func SpiflashRead(Device []Device, Address uint32, Length uint16, Data []byte) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cAddress, _ := (C.uint32_t)(Address), cgoAllocsUnknown
// 	cLength, _ := (C.uint16_t)(Length), cgoAllocsUnknown
// 	cData, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Data)).Data)), cgoAllocsUnknown
// 	__ret := C.hackrf_spiflash_read(cDevice, cAddress, cLength, cData)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // SpiflashStatus function as declared in src/hackrf.h:213
// func SpiflashStatus(Device []Device, Data []byte) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cData, _ := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Data)).Data)), cgoAllocsUnknown
// 	__ret := C.hackrf_spiflash_status(cDevice, cData)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // SpiflashClearStatus function as declared in src/hackrf.h:214
// func SpiflashClearStatus(Device []Device) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	__ret := C.hackrf_spiflash_clear_status(cDevice)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // CpldWrite function as declared in src/hackrf.h:217
// func CpldWrite(Device []Device, Data []byte, TotalLength uint32) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cData, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Data)).Data)), cgoAllocsUnknown
// 	cTotalLength, _ := (C.uint)(TotalLength), cgoAllocsUnknown
// 	__ret := C.hackrf_cpld_write(cDevice, cData, cTotalLength)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // BoardIdRead function as declared in src/hackrf.h:220
// func BoardIdRead(Device []Device, Value []byte) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cValue, _ := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Value)).Data)), cgoAllocsUnknown
// 	__ret := C.hackrf_board_id_read(cDevice, cValue)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // VersionStringRead function as declared in src/hackrf.h:221
// func VersionStringRead(Device []Device, Version []byte, Length byte) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cVersion, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Version)).Data)), cgoAllocsUnknown
// 	cLength, _ := (C.uint8_t)(Length), cgoAllocsUnknown
// 	__ret := C.hackrf_version_string_read(cDevice, cVersion, cLength)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // USBAPIVersionRead function as declared in src/hackrf.h:222
// func USBAPIVersionRead(Device []Device, Version []uint16) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cVersion, _ := (*C.uint16_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Version)).Data)), cgoAllocsUnknown
// 	__ret := C.hackrf_usb_api_version_read(cDevice, cVersion)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // SetFreqExplicit function as declared in src/hackrf.h:225
// func SetFreqExplicit(Device []Device, IfFreqHz uint, LoFreqHz uint, Path RfPathFilter) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cIfFreqHz, _ := (C.uint64_t)(IfFreqHz), cgoAllocsUnknown
// 	cLoFreqHz, _ := (C.uint64_t)(LoFreqHz), cgoAllocsUnknown
// 	cPath, _ := (C.enum_rf_path_filter)(Path), cgoAllocsUnknown
// 	__ret := C.hackrf_set_freq_explicit(cDevice, cIfFreqHz, cLoFreqHz, cPath)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // SetSampleRateManual function as declared in src/hackrf.h:230
// func SetSampleRateManual(Device []Device, FreqHz uint32, Divider uint32) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cFreqHz, _ := (C.uint32_t)(FreqHz), cgoAllocsUnknown
// 	cDivider, _ := (C.uint32_t)(Divider), cgoAllocsUnknown
// 	__ret := C.hackrf_set_sample_rate_manual(cDevice, cFreqHz, cDivider)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // BoardPartidSerialnoRead function as declared in src/hackrf.h:236
// func BoardPartidSerialnoRead(Device []Device, ReadPartidSerialno []ReadPartidSerialno) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cReadPartidSerialno, _ := unpackArgSReadPartidSerialno(ReadPartidSerialno)
// 	__ret := C.hackrf_board_partid_serialno_read(cDevice, cReadPartidSerialno)
// 	packSReadPartidSerialno(ReadPartidSerialno, cReadPartidSerialno)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // BoardIdName function as declared in src/hackrf.h:251
// func BoardIdName(BoardId BoardId) string {
// 	cBoardId, _ := (C.enum_hackrf_board_id)(BoardId), cgoAllocsUnknown
// 	__ret := C.hackrf_board_id_name(cBoardId)
// 	__v := packPCharString(__ret)
// 	return __v
// }

// // USBBoardIdName function as declared in src/hackrf.h:252
// func USBBoardIdName(USBBoardId USBBoardId) string {
// 	cUSBBoardId, _ := (C.enum_hackrf_usb_board_id)(USBBoardId), cgoAllocsUnknown
// 	__ret := C.hackrf_usb_board_id_name(cUSBBoardId)
// 	__v := packPCharString(__ret)
// 	return __v
// }

// // FilterPathName function as declared in src/hackrf.h:253
// func FilterPathName(Path RfPathFilter) string {
// 	cPath, _ := (C.enum_rf_path_filter)(Path), cgoAllocsUnknown
// 	__ret := C.hackrf_filter_path_name(cPath)
// 	__v := packPCharString(__ret)
// 	return __v
// }

// // ComputeBasebandFilterBwRoundDownLt function as declared in src/hackrf.h:256
// func ComputeBasebandFilterBwRoundDownLt(BandwidthHz uint32) uint32 {
// 	cBandwidthHz, _ := (C.uint32_t)(BandwidthHz), cgoAllocsUnknown
// 	__ret := C.hackrf_compute_baseband_filter_bw_round_down_lt(cBandwidthHz)
// 	__v := (uint32)(__ret)
// 	return __v
// }

// // ComputeBasebandFilterBw function as declared in src/hackrf.h:258
// func ComputeBasebandFilterBw(BandwidthHz uint32) uint32 {
// 	cBandwidthHz, _ := (C.uint32_t)(BandwidthHz), cgoAllocsUnknown
// 	__ret := C.hackrf_compute_baseband_filter_bw(cBandwidthHz)
// 	__v := (uint32)(__ret)
// 	return __v
// }

// // SetHwSyncMode function as declared in src/hackrf.h:263
// func SetHwSyncMode(Device []Device, Value byte) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cValue, _ := (C.uint8_t)(Value), cgoAllocsUnknown
// 	__ret := C.hackrf_set_hw_sync_mode(cDevice, cValue)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // InitSweep function as declared in src/hackrf.h:266
// func InitSweep(Device []Device, FrequencyList []uint16, NumRanges int32, NumBytes uint32, StepWidth uint32, Offset uint32, Style SweepStyle) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cFrequencyList, _ := (*C.uint16_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&FrequencyList)).Data)), cgoAllocsUnknown
// 	cNumRanges, _ := (C.int)(NumRanges), cgoAllocsUnknown
// 	cNumBytes, _ := (C.uint32_t)(NumBytes), cgoAllocsUnknown
// 	cStepWidth, _ := (C.uint32_t)(StepWidth), cgoAllocsUnknown
// 	cOffset, _ := (C.uint32_t)(Offset), cgoAllocsUnknown
// 	cStyle, _ := (C.enum_sweep_style)(Style), cgoAllocsUnknown
// 	__ret := C.hackrf_init_sweep(cDevice, cFrequencyList, cNumRanges, cNumBytes, cStepWidth, cOffset, cStyle)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // GetOperacakeBoards function as declared in src/hackrf.h:272
// func GetOperacakeBoards(Device []Device, Boards []byte) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cBoards, _ := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Boards)).Data)), cgoAllocsUnknown
// 	__ret := C.hackrf_get_operacake_boards(cDevice, cBoards)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // SetOperacakeMode function as declared in src/hackrf.h:273
// func SetOperacakeMode(Device []Device, Address byte, Mode OperacakeSwitchingMode) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cAddress, _ := (C.uint8_t)(Address), cgoAllocsUnknown
// 	cMode, _ := (C.enum_operacake_switching_mode)(Mode), cgoAllocsUnknown
// 	__ret := C.hackrf_set_operacake_mode(cDevice, cAddress, cMode)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // GetOperacakeMode function as declared in src/hackrf.h:274
// func GetOperacakeMode(Device []Device, Address byte, Mode []OperacakeSwitchingMode) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cAddress, _ := (C.uint8_t)(Address), cgoAllocsUnknown
// 	cMode, _ := (*C.enum_operacake_switching_mode)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Mode)).Data)), cgoAllocsUnknown
// 	__ret := C.hackrf_get_operacake_mode(cDevice, cAddress, cMode)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // SetOperacakePorts function as declared in src/hackrf.h:275
// func SetOperacakePorts(Device []Device, Address byte, PortA byte, PortB byte) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cAddress, _ := (C.uint8_t)(Address), cgoAllocsUnknown
// 	cPortA, _ := (C.uint8_t)(PortA), cgoAllocsUnknown
// 	cPortB, _ := (C.uint8_t)(PortB), cgoAllocsUnknown
// 	__ret := C.hackrf_set_operacake_ports(cDevice, cAddress, cPortA, cPortB)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // SetOperacakeDwellTimes function as declared in src/hackrf.h:279
// func SetOperacakeDwellTimes(Device []Device, DwellTimes []OperacakeDwellTime, Count byte) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cDwellTimes, _ := unpackArgSOperacakeDwellTime(DwellTimes)
// 	cCount, _ := (C.uint8_t)(Count), cgoAllocsUnknown
// 	__ret := C.hackrf_set_operacake_dwell_times(cDevice, cDwellTimes, cCount)
// 	packSOperacakeDwellTime(DwellTimes, cDwellTimes)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // SetOperacakeFreqRanges function as declared in src/hackrf.h:280
// func SetOperacakeFreqRanges(Device []Device, FreqRanges []OperacakeFreqRange, Count byte) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cFreqRanges, _ := unpackArgSOperacakeFreqRange(FreqRanges)
// 	cCount, _ := (C.uint8_t)(Count), cgoAllocsUnknown
// 	__ret := C.hackrf_set_operacake_freq_ranges(cDevice, cFreqRanges, cCount)
// 	packSOperacakeFreqRange(FreqRanges, cFreqRanges)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // Reset function as declared in src/hackrf.h:282
// func Reset(Device []Device) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	__ret := C.hackrf_reset(cDevice)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // SetOperacakeRanges function as declared in src/hackrf.h:284
// func SetOperacakeRanges(Device []Device, Ranges []byte, NumRanges byte) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cRanges, _ := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Ranges)).Data)), cgoAllocsUnknown
// 	cNumRanges, _ := (C.uint8_t)(NumRanges), cgoAllocsUnknown
// 	__ret := C.hackrf_set_operacake_ranges(cDevice, cRanges, cNumRanges)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // SetClkoutEnable function as declared in src/hackrf.h:288
// func SetClkoutEnable(Device []Device, Value byte) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cValue, _ := (C.uint8_t)(Value), cgoAllocsUnknown
// 	__ret := C.hackrf_set_clkout_enable(cDevice, cValue)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // OperacakeGpioTest function as declared in src/hackrf.h:290
// func OperacakeGpioTest(Device []Device, Address byte, TestResult []uint16) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cAddress, _ := (C.uint8_t)(Address), cgoAllocsUnknown
// 	cTestResult, _ := (*C.uint16_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&TestResult)).Data)), cgoAllocsUnknown
// 	__ret := C.hackrf_operacake_gpio_test(cDevice, cAddress, cTestResult)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // SetUiEnable function as declared in src/hackrf.h:298
// func SetUiEnable(Device []Device, Value byte) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cValue, _ := (C.uint8_t)(Value), cgoAllocsUnknown
// 	__ret := C.hackrf_set_ui_enable(cDevice, cValue)
// 	__v := (int32)(__ret)
// 	return __v
// }

// // StartRxSweep function as declared in src/hackrf.h:299
// func StartRxSweep(Device []Device, Callback SampleBlockCbFn, RxCtx unsafe.Pointer) int32 {
// 	cDevice, _ := (*C.hackrf_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
// 	cCallback, _ := Callback.PassValue()
// 	cRxCtx, _ := RxCtx, cgoAllocsUnknown
// 	__ret := C.hackrf_start_rx_sweep(cDevice, cCallback, cRxCtx)
// 	__v := (int32)(__ret)
// 	return __v
// }

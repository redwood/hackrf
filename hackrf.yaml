---
GENERATOR:
    PackageName: hackrf
    PackageDescription: "Package hackrf provides Go bindings for libhackrf"
    PackageLicense: "THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS."
    Includes:
        - host/libhackrf/src/hackrf.h
        # - firmware/common/hackrf_core.h
    SysIncludes:
        - inttypes.h
        - complex.h
    FlagGroups:
      - {name: "CFLAGS", flags: [
          "-msse4.1",
          "-Wall",
          "-fPIC",
          "-I.",
          "-I..",
          "-I../host/libhackrf/src",
          # "-I../firmware/libopencm3/include",
      ]}
      - {name: "LDFLAGS", flags: [
          "-lm",
          "-lusb-1.0",
          "${SRCDIR}/../host/build/libhackrf/src/libhackrf.a",
      ]}

PARSER:
  IncludePaths:
      - /usr/include
      - /usr/include/linux
      - include/
      # - firmware/libopencm3/include/
  SourcesPaths:
      - host/libhackrf/src/hackrf.h
      # - firmware/common/hackrf_core.h
  Defines:
      __linux__: 1
      HAVE_COMPLEX_H: 1
      HACKRF_ONE: 1

TRANSLATOR:
    ConstRules:
        defines: eval
        enum: eval
    Rules:
        global:
            - {transform: lower}
            - {action: accept, from: "^hackrf"}
            - {action: accept, from: "^HACKRF"}
            - {action: accept, from: "^USB_"}
            - {action: accept, from: "^BOARD_"}
            - {action: accept, from: "^RF_"}
            - {action: accept, from: "^OPERACAKE_"}
            - {action: accept, from: "^TRANSCEIVER_"}
            - {action: accept, from: "^transceiver_"}
            - {action: accept, from: "^LINEAR"}
            - {action: accept, from: "^INTERLEAVED"}
            - {action: accept, from: "^read"}
            - {action: replace, from: "Id", to: "ID"}
            # - {action: replace, from: "Id", to: "ID"}
            - {action: replace, from: "Usb", to: "USB"}
            - {action: replace, from: "usb", to: "USB"}
            - {action: replace, from: "Api", to: "API"}
            - {action: replace, from: "api", to: "API"}
            - {transform: export}
        type:
            - {action: replace, from: "_s$", to: "_t"}
            - {action: replace, from: "_t$"}
        const:
            - {action: replace, from: "_id_", to: "_ID_"}
            - {action: replace, from: "rf_", to: "RF_"}
            - {action: replace, from: "OPERACAKE_PA", to: "RF_"}
        #     - {action: replace, from: "Usb", to: "USB "}
        # private:
        #     - {transform: unexport}
            # - {action: replace, from: "Id$", to: "ID"}
        function:
            - {action: replace, from: "_device_list", to: "_get_device_list"}
        post-global:
            # - {action: replace, from: "_q Gmskmod", to: "("}
            # - {action: replace, from: "Gmskmod", to: GMSKMod}
            # - {action: replace, from: "Gmskdem", to: GMSKDemod}
            # - {action: replace, from: "Hackrf_device_list$", to: "GetDeviceList"}
            - {action: replace, from: "Id$", to: "ID"}
            - {action: replace, from: _$}
            - {load: snakecase}
            - {action: replace, from: "^Hackrf"}
            # - {action: replace, from: "^Complexfloat$", to: "complex64"}
    PtrTips:
        function:
            - {target: "^hackrf_open$", tips: [sref]}
            - {target: "^hackrf_close$", tips: [sref]}
            - {target: "^hackrf_set_sample_rate$", tips: [sref, 0]}
            - {target: "^hackrf_set_vga_gain$", tips: [sref, 0]}
            - {target: "^hackrf_set_txvga_gain$", tips: [sref, 0]}
            - {target: "^hackrf_set_lna_gain$", tips: [sref, 0]}
            - {target: "^hackrf_set_freq$", tips: [sref, 0]}
            - {target: "^hackrf_start_tx$", tips: [sref, 0, 0]}
            - {target: "^hackrf_stop_tx$", tips: [sref]}
            - {target: "^hackrf_start_rx$", tips: [sref, 0, 0]}
            - {target: "^hackrf_stop_rx$", tips: [sref]}
            - {target: "^hackrf_is_streaming$", tips: [sref]}
            - {target: "^hackrf_sample_block_cb_fn$", tips: [sref]}
    # TypeTips:
    #     function:
    #         - {target: "^hackrf_sample_block_cb_fn$", tips: [plain]}
